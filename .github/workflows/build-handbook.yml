name: Check handbook builds correctly

on:
  - push

jobs:
  # geojson:
  #   name: Teammate locations file is valid
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-node@v2
  #     - name: install geojsonhint
  #       run: yarn add @mapbox/geojsonhint@3.0.0
  #     - name: geojsonhint
  #       run: node_modules/.bin/geojsonhint < ./handbook/company/team/locations.geojson

  # Put everything under one job to not clutter the GitHub status checks list.
  build:
    runs-on: ubuntu-latest
    env:
      FORCE_COLOR: 3
    steps:
      - uses: actions/checkout@v2
        name: Checkout repository
        with:
          fetch-depth: 0 # We analyze Git history for generating redirects

      # set up correct version of node
      - id: nvmrc
        name: Read .nvmrc
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)
      - uses: actions/setup-node@v2
        name: Set up NodeJS
        with:
          node-version: '${{ steps.nvmrc.outputs.NODE_VERSION }}'

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        with:
          path: |
            ${{ steps.yarn-cache-dir-path.outputs.dir }}
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

      - run: yarn
        name: Install dependencies
      - run: yarn typecheck
        name: Type-check code with TypeScript compiler
      - run: yarn eslint
        name: Lint code with ESLint
      - run: yarn build
        name: Build handbook with NextJS
